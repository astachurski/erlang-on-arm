/*
 * atom.c
 *
 *  Created on: Mar 31, 2014
 *      Author: Studnicki
 */

#include "atom.h"
#include "hash.h"

void init_atom_table(void) {
	HashFunctions f;
}

// Hash-table callbacks
// hashpjw
static HashValue atom_hash(Atom* obj) {
	 byte* p = obj->name;
	 int len = obj->len;
	 HashValue h = 0, g;

	 while(len--) {
		h = (h << 4) + *p++;
		if ((g = h & 0xf0000000)) {
		    h ^= (g >> 24);
		    h ^= g;
		}
	 }
	 return h;
}

static int atom_cmp(Atom* tmp, Atom* obj) {
	if(tmp->len == obj->len &&
	   memcmp(tmp->name, obj->name, tmp->len) == 0) {
		return 0;
	}
	return 1;
}

static Atom* atom_alloc(Atom* tmp) {
	Atom* obj = (Atom*)pvPortMalloc(sizeof(Atom));
	obj->name = (byte*)pvPortMalloc(tmp->len);
	memcpy(obj->name, tmp->name, tmp->len);
	obj->len = tmp->len;

	//calculate ord (used for atom comparision)
	unsigned char c[4];
	int i,j;
	j = (tmpl->len < 4) ? tmpl->len : 4;
	for(i=0; i<j; i++) {
		c[i] = tmpl->name[i];
	}
	for(; i<4; i++) {
		c[i] = '\0';
	}
	obj->ord0 = (c[0] << 23) + (c[1] << 15) + (c[2] << 7) + (c[3] >> 1);

	return obj;
}

static void atom_free(Atom* obj) {
	vPortFree((void*)obj);
}
